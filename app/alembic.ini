# A generic, single database configuration.

[alembic]

# path to migration scripts
#
script_location = alembic

# migration file names to be prepended with date and time
#
file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
#
prepend_sys_path = .

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# version location specification
#
version_locations = alembic/versions

# version path separator - the character used to split version_locations
#
version_path_separator = os
# Use os.pathsep.

sqlalchemy.url = mysql+mysqlconnector://%(DB_USER)s:%(DB_PASSWORD)s@localhost/%(DB_NAME)s
# postgresql+asyncpg://%(DB_USER)s:%(DB_PASSWORD)s@localhost/%(DB_NAME)s

[post_write_hooks]

# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
